
input {
    kafka {
        codec => json
        bootstrap_servers => "cdopla-852.bell.corp.bce.ca:9092,cdopla-853.bell.corp.bce.ca:9092,cdopla-4008.bell.corp.bce.ca:9092"
        topics => ["uat01-cpm-bbm-gk-partial"]
        decorate_events => true
        auto_offset_reset => "latest"
        group_id => "gk_address_kafka_fetch"
    }
}

filter {


    ruby {
        code => "
            # process the event only when any one of the cdc is presnet 

            if event.get('RequestObject')['description'] == 'MAINGK' or event.get('RequestObject')['description'] == 'MAINSK' or event.get('RequestObject')['description'] == 'SK Internal'
            	cdc_list=['DELETE_LOCATIONGROUP', 'LOCATIONGROUP', 'CPMACCOUNTREGISTRY', 'DELETE_CPMACCOUNTREGISTRY', 'DELETE_IDENTIFIER', 'IDENTIFIER', 'DELETE_CONTEQUIV', 'CONTEQUIV', 'DELETE_CONTRACROLE', 'CONTRACROLE']
            	if ! event.get('RequestObject')['cdc_list'].nil?
                	if  event.get('RequestObject')['cdc_list'].detect {|cdc| cdc_list.include?(cdc)}
                        	event.set('gk_id', event.get('RequestObject')['admin_client_id'])
                        	event.set('contequiv_id', event.get('RequestObject')['cont_equiv_id'])
                        	break
                	end
            	end
            end
        "
    }


    if [gk_id]  and "MAINGK"==[RequestObject][description]{
        jdbc_streaming {
            jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
            jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
            jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
            jdbc_user => "MDM_LOGSTASH"
            jdbc_password => "LOG_x2r97BQ2"
            statement => "select source_id,(addr_line_one ||' '||city_name||' '||province||' '||postal_code||' '||country) AS addr,source_system,gk_id,profile_type,addr_type,addr_line_one,addr_line_two,addr_line_three,city_name,province,postal_code,main_cust_ind,country from mdm_usr.svw_full_elk_gk_add where gk_id=:gk_id "
            parameters => {
                "gk_id" => "gk_id"
            }
            target => "gk_addr_details"
            use_cache => false
        }
        jdbc_streaming {
            jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"

            jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
            jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
            jdbc_user => "MDM_LOGSTASH"
            jdbc_password => "LOG_x2r97BQ2"
            statement => "select source_id,gk_id,source_system,identifier,identifier_type,main_acc_ind,profile_type from mdm_usr.VW_FULL_ELK_IDENTIFIER where
            identifier_type not in ('Duns_Id','Connect_Id') and gk_id=:gk_id "
            parameters => {
                "gk_id" => "gk_id"
            }
            target => "iden_gk_details"
            use_cache => false
        }
	
        jdbc_streaming {
            jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
            jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
            jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
            jdbc_user => "MDM_LOGSTASH"
            jdbc_password => "LOG_x2r97BQ2"

            statement => "select gk_id,ca_id,source_id,ban,source_system from mdm_usr.SWV_FULL_ELK_GK_BAN where gk_id=:gk_id"
            parameters => {
                "gk_id" => "gk_id"
            }
            target => "pa_ban_details"
            use_cache => false
        }
	jdbc_streaming {
        	jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
        	jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        	jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
        	jdbc_user => "MDM_LOGSTASH"
        	jdbc_password => "LOG_x2r97BQ2"
        	statement => "select child_id as sk_id,parent_id,roletp,org_name from mdm_usr.vw_full_elk_gk_relationship where child_id=:gk_id"
        	parameters => {
            		"gk_id" => "gk_id"
        	}
        	target => "gk_rel_details"
        	use_cache => false
    	}
        jdbc_streaming {
            jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
            jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
            jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
            jdbc_user => "MDM_LOGSTASH"
            jdbc_password => "LOG_x2r97BQ2"
            statement => "select gk_id,MAIN_CA_INDICATOR,main_maximo_ind,main_ca,source_id,case when source_type_code =1000004 then 'IPACT' else SOURCE_TYPE_NAME end as source_system ,description,customer_support_model from mdm_usr.svw_full_approved_customer where gk_id=:source_id"
            parameters => {
                "source_id" => "gk_id"
            }
            target => "gkaccounts_ca_details"
            use_cache => false
        }

        if "MAINGK"==[RequestObject][description] and [contequiv_id] {
            jdbc_streaming {
                jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
                jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
                jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
                jdbc_user => "MDM_LOGSTASH"
                jdbc_password => "LOG_x2r97BQ2"
                statement => "select contequiv.admin_client_id as GK_ID, case when approve_gk.TO_CONTEQUIV_ID is not null then  'Yes' else 'No' end as STAT from mdm_usr.contequiv left outer join  ( select TO_CONTEQUIV_ID from ( select TO_CONTEQUIV_ID , rownum as rn FROM mdm_usr.CPMACCOUNTREGISTRY INNER JOIN mdm_usr.contequiv ca ON  CPMACCOUNTREGISTRY.FROM_CONTEQUIV_ID=  ca.CONT_EQUIV_ID and ca.description in ('CUSTOMER','BILLING','SERVICE') and ca.admin_sys_tp_cd not in (1000040)  AND ca.last_verified_dt IS NOT NULL   AND ca.end_dt IS NULL and ca.cont_id not in (select cont_id from mdm_usr.orgname where org_name_tp_cd='9999999' and end_dt is null) WHERE CPMACCOUNTREGISTRY.END_DT IS NULL AND CPMACCOUNTREGISTRY.TO_CONTEQUIV_ID= ? ) where  rn=1) approve_gk on contequiv.CONT_EQUIV_ID=approve_gk.TO_CONTEQUIV_ID  where contequiv.end_dt IS NULL AND contequiv.description = 'MAINGK' and contequiv.CONT_EQUIV_ID=?"
                prepared_statement_bind_values => ["[contequiv_id]","[contequiv_id]"]
                prepared_statement_name => "logstash_uat_gk_approval_query"
                use_prepared_statements => true
                target => "reviewdb"
                use_cache => false
            }

            if [reviewdb][0][stat] {
                mutate {
                    add_field => ["review","%{[reviewdb][0][stat]}"]
                }
            }
            else {
                mutate {
                    add_field => [ "review","No"]
                }
            }

        }
        else {
            mutate {
                add_field => [ "review","No"]
            }
        }
    }	else if "SK Internal"==[RequestObject][description] and [gk_id] {
    mutate {
        add_field => ["silverkey","%{gk_id}"]
    }
    jdbc_streaming {
        jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
        jdbc_user => "MDM_LOGSTASH"
        jdbc_password => "LOG_x2r97BQ2"
        statement => "select (addr_line_one ||' '||city_name||' '||province||' '||postal_code||' '||country)as addr,addr_type,addr_line_one,addr_line_two,city_name,province,postal_code,country,sk_id,linkedkey_type from mdm_usr.VW_FULL_ELK_SK_INT_MACRO_ADD where sk_id=:source_id"
        parameters => {
            "source_id" => "silverkey"
        }
        target => "int_addr_details"
        use_cache => false
    }

    #if we have gk get all address attched to gk 
    jdbc_streaming {
        jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
        jdbc_user => "MDM_LOGSTASH"
        jdbc_password => "LOG_x2r97BQ2"
        statement => "select source_id,sk_id,identifier,identifier_type,source_system,description from mdm_usr.VW_FULL_ELK_SK_INT_IDENTIFIER where source_id=:source_id2 "
        parameters => {
            "source_id2" => "silverkey"
        }

        target => "int_ident_details"
        use_cache => false
    }
     

    jdbc_streaming {
        jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
        jdbc_user => "MDM_LOGSTASH"
        jdbc_password => "LOG_x2r97BQ2"
        statement => "select source_id,source_system,linked_key,linkedkey_type  from ( SELECT SK_ID. SOURCE_ID, 'CPM' AS SOURCE_TP, SK_ID.SOURCE_TYPE_NAME as SOURCE_SYSTEM, SK_ID.CONTEQUIV_ID, SK_ID.SOURCE_TYPE_CODE AS SOURCE_TYPE, ORG_NAME_TABLE.ORG_NAME AS ORG_NAME, ORG_NAME_TABLE.S_ORG_NAME AS S_ORG_NAME, SK_ID.INDUSTRY_TP_NAME AS INDUSTRY_TP, SK_ID. DESCRIPTION, SK_ID.SUPPORT_MODEL_TO_VALUE as CUSTOMER_SUPPORT_MODEL, 'ACTIVE' AS STATUS, CASE WHEN SK_ID.LAST_VERIFIED_DT IS NOT NULL THEN  SK_ID.SK_ID   ELSE NULL END AS LINKED_KEY, SK_ID.linkedkey_type, case WHEN SK_ID.LAST_VERIFIED_DT IS NOT NULL AND SK_ID.MAIN_CA_INDICATOR='Y'  THEN SK_ID.MAIN_CA_INDICATOR ELSE NULL END AS MAIN_CUST_IND, case WHEN SK_ID.LAST_VERIFIED_DT IS NOT NULL AND SK_ID.MAIN_MAXIMO_IND='Y'THEN SK_ID.MAIN_MAXIMO_IND ELSE NULL END AS MAIN_MAXIMO_IND , CASE WHEN  SK_ID.CLIENT_IMP_TP_CD=1000004 then 'True' WHEN SK_ID.CLIENT_IMP_TP_CD=1000005 then 'False' else null END AS GOA_FLAG, SK_ID.LAST_UPDATE_DT, SK_ID.LAST_UPDATE_USER, SK_ID.CONT_ID FROM mdm_usr.SVW_FULL_APPROVED_SK_INTERNAL SK_ID INNER  JOIN mdm_usr.SVW_FULL_ORGNAME ORG_NAME_TABLE ON SK_ID.CONT_ID  =ORG_NAME_TABLE.CONT_ID AND  SK_ID.CONTEQUIV_ID =ORG_NAME_TABLE.CONTEQUIV_ID AND ORG_NAME_TABLE.ORG_NAME_TYPE_CODE=1000000 where  SK_ID.DESCRIPTION='CUSTOMER' and SK_ID.LAST_VERIFIED_DT IS NOT NULL and SK_ID.SK_ID=:gk_id )"
        parameters => {
            "gk_id" => "silverkey"
        }
        target => "int_bellext_details"
        use_cache => false
    }

   }
	else if "MAINSK" == [RequestObject][description] and [gk_id]
    {
        mutate {
            add_field => {
                    "silverkey" => "%{gk_id}"
            }
        }

        jdbc_streaming {
            jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
            jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
            jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
            jdbc_user => "MDM_LOGSTASH"
            jdbc_password => "LOG_x2r97BQ2"
            statement => "select source_id,source_system,linked_key,linkedkey_type  from ( SELECT SK_ID. SOURCE_ID, 'CPM' AS SOURCE_TP, SK_ID.SOURCE_TYPE_NAME as source_system, SK_ID.CONTEQUIV_ID, SK_ID.SOURCE_TYPE_CODE AS SOURCE_TYPE, ORG_NAME_TABLE.ORG_NAME AS ORG_NAME, ORG_NAME_TABLE.S_ORG_NAME AS S_ORG_NAME, SK_ID.INDUSTRY_TP_NAME AS INDUSTRY_TP, SK_ID. DESCRIPTION, SK_ID.SUPPORT_MODEL_TO_VALUE as CUSTOMER_SUPPORT_MODEL, 'ACTIVE' AS STATUS, CASE WHEN SK_ID.LAST_VERIFIED_DT IS NOT NULL THEN  SK_ID.SK_ID   ELSE NULL END AS LINKED_KEY, SK_ID.linkedkey_type, case WHEN SK_ID.LAST_VERIFIED_DT IS NOT NULL AND SK_ID.MAIN_CA_INDICATOR='Y'  THEN SK_ID.MAIN_CA_INDICATOR ELSE NULL END AS MAIN_CUST_IND, case WHEN SK_ID.LAST_VERIFIED_DT IS NOT NULL AND SK_ID.MAIN_MAXIMO_IND='Y'THEN SK_ID.MAIN_MAXIMO_IND ELSE NULL END AS MAIN_MAXIMO_IND , CASE WHEN  SK_ID.CLIENT_IMP_TP_CD=1000004 then 'True' WHEN SK_ID.CLIENT_IMP_TP_CD=1000005 then 'False' else null END AS GOA_FLAG, SK_ID.LAST_UPDATE_DT, SK_ID.LAST_UPDATE_USER, SK_ID.CONT_ID FROM mdm_usr.SVW_FULL_APPROVED_SK_EXTERNAL SK_ID INNER  JOIN mdm_usr.SVW_FULL_ORGNAME ORG_NAME_TABLE ON SK_ID.CONT_ID  =ORG_NAME_TABLE.CONT_ID AND  SK_ID.CONTEQUIV_ID =ORG_NAME_TABLE.CONTEQUIV_ID AND ORG_NAME_TABLE.ORG_NAME_TYPE_CODE=1000000 where  SK_ID.DESCRIPTION='CUSTOMER'and SK_ID.LAST_VERIFIED_DT IS NOT NULL and SK_ID.SK_ID=:gk_id  )"
            parameters => {
                "gk_id" => "silverkey"
            }
            target => "ext_bellext_details"
            use_cache => false
        }
        
        jdbc_streaming {
            jdbc_driver_library => "/opt/IBM/Install/Binaries/logstash/ojdbc7-12.1.0.2.jar"
            jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
            jdbc_connection_string => "jdbc:oracle:thin:@cwypld-4032.bell.corp.bce.ca:2349/PRCP2"
            jdbc_user => "MDM_LOGSTASH"
            jdbc_password => "LOG_x2r97BQ2"
            statement => "select (addr_line_one ||' '||city_name||' '||province||' '||postal_code||' '||country)as addr,addr_type,addr_line_one,addr_line_two,city_name,province,postal_code,country,sk_id,linkedkey_type from mdm_usr.VW_FULL_ELK_SK_EXT_MACRO_ADD where sk_id=:source_id"
            parameters => {
                "source_id" => "silverkey"
            }
            target => "ext_addr_details"

            use_cache => false
        }
    }

    if [gk_id] and "MAINGK"==[RequestObject][description] {
        clone {
            clones => [ "allkeysGKmacro" ]
        }
        clone {
            clones => ["GranualGK"]
            remove_field => ["pa_ban_details", "gkaccounts_ca_details", "reviewdb", "review"]
        }
    }else if [silverkey] and ("MAINSK"==[RequestObject][description] or "SK Internal"==[RequestObject][description]){
	clone{
		clones => ["allkeysGKmacro"]
		remove_field => ["gk_id"]
	}
    }

    if [type] == "GranualGK" {
        mutate {
            add_field => {
                "[@metadata][target_index]" => "vwbbm_mdm116_gk_detail_uat_v2_test"
            }
            add_field => {
                "[@metadata][docid_efast]" => "%{gk_id}"
            }
        }
    }


    if  ( [type]== "allkeysGKmacro"   and [gk_id]) and "MAINGK"==[RequestObject][description] {
        mutate {
            add_field => {
                "[@metadata][target_index]" => "vwbbm_mdm116_tmf_all_keys_uat_v1_test"
            }
            add_field => {
                "[@metadata][docid]" => "%{gk_id}CPMKEY"
            }
	    add_field => {
                "source_key" => "%{gk_id}"
            }
	    add_field => { "id" => "%{gk_id}" }	 
        }
    }


    if ([type]== "allkeysGKmacro" and [silverkey]){
        mutate {
                add_field => { "[@metadata][target_index]" => "vwbbm_mdm116_tmf_all_keys_uat_v1_test" }
                add_field => { "[@metadata][docid]" =>  "%{silverkey}CPMKEY" }
		add_field => { "source_key" => "%{silverkey}" }
		add_field => { "id" => "%{silverkey}" }
            }
    }

    ruby {
        path => "/opt/IBM/Install/Binaries/logstash/logstash-7.16.2/bin/nag_test/Allkeystesting/rubymod.rb"
    }

    mutate {
        add_field => {
            "load_time" => "%{@timestamp}"
        }
        remove_field => ["@timestamp","gk_rel_details","descriptionacc","silverkey","int_bellext_details","ext_rel_details","int_rel_details","int_secsk_details","int_ident_details","int_addr_details","review","ext_bellext_details","ext_addr_details", "@version","gk_rel_details","ext_secsk_details","int_secsk_details","gk_rel_details","RequestObject","mdmObject","ResponseObject", "gk_addr_details","contequiv_id", "reviewdb" ,"tags", "iden_gk_details", "type", "gkaccounts_ca_details", "pa_ban_details","gk_id","partyCharacteristic"]
    }

}

output {
    file {
        path => "/opt/IBM/Install/Binaries/logstash/logstash-7.16.2/bin/nag_test/Allkeystesting/outputlocation.txt"
    }
}
